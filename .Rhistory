# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C, inputData, gaussian, "none", "gaussianTest", mcmcControl)
head(simulatedValues)
head(simulatedValues)[1:10, 1:6]
simulatedValues[1:10, 1:6]
apply(X = simulatedValues, FUN = function(curRow) { curRow[duplicated(curRow)]}, MARGIN = 1)
modelNodeDefinitions$inputData[[modelNodeDefinitions$responseDataNodeNames]]
as.double(modelNodeDefinitions$inputData[[modelNodeDefinitions$responseDataNodeNames]])
table(duplictaed(as.double(modelNodeDefinitions$inputData[[modelNodeDefinitions$responseDataNodeNames]])))
table(duplicated(as.double(modelNodeDefinitions$inputData[[modelNodeDefinitions$responseDataNodeNames]])))
createDHARMa(
simulatedResponse = simulatedValues,
observedResponse = modelNodeDefinitions$inputData[[modelNodeDefinitions$responseDataNodeNames]],
fittedPredictedResponse = mcmcOutput$summary$all.chains[grepl("^meanPred", rownames(mcmcOutput$summary$all.chains), perl = TRUE), "Median"],
integerResponse = switch(as.character(modelNodeDefinitions$family),
gaussian = FALSE, gamma = FALSE, beta = FALSE,
poisson = TRUE, binomial = TRUE, negbinomial = TRUE
)
)
mcmcOutput$summary$all.chains[grepl("^meanPred", rownames(mcmcOutput$summary$all.chains), perl = TRUE), "Median"]
createDHARMa(
simulatedResponse = simulatedValues,
observedResponse = modelNodeDefinitions$inputData[[modelNodeDefinitions$responseDataNodeNames]],
integerResponse = switch(as.character(modelNodeDefinitions$family),
gaussian = FALSE, gamma = FALSE, beta = FALSE,
poisson = TRUE, binomial = TRUE, negbinomial = TRUE
)
)
simulatedValues[duplicated(simulatedValues)]
?createDHARMa
class(simulatedValues)
dim(simulatedValues)
length(simulatedValues)
length(modelNodeDefinitions$inputData[[modelNodeDefinitions$responseDataNodeNames]])
length(mcmcOutput$summary$all.chains[grepl("^meanPred", rownames(mcmcOutput$summary$all.chains), perl = TRUE), "Median"])
debug(createDHARMa)
dim(simulations)
simulations[1:6, 1:6]
observed
nSim
as.vector(simulations)[duplicated(as.vector(simulations))]
as.double(simulations)[duplicated(as.double(simulations))]
undebug(createDHARMa)
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "mcmcInternals.R", sep = "/"))
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "glmNIMBLE.R", sep = "/"))
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C, inputData, gaussian, "none", "gaussianTest", mcmcControl)
as.double(simulatedValues)[duplicated(as.double(simulatedValues))]
simulatedValues <- apply(X = as.matrix(do.call(rbind, mcmcOutput$samples)), FUN = function(curRow, covMatrix, inFamily, inLink, inData) {
# Calculate the mean prediction values
meanPredVals <- applyInverseLink(
as.double(covMatrix %*% curRow[paste(colnames(covMatrix), "Coeff", sep = "")] + curRow[grepl("^intercept.*Coeff$", names(curRow), perl = TRUE)]),
inLink)
# Retrieve the relevant scale parameter for the error distribution
scaleValues <- switch(inFamily,
gaussian = curRow[grepl("Prec$", names(curRow), perl = TRUE)],
gamma = curRow[grepl("SD$", names(curRow), perl = TRUE)],
beta = curRow[grepl("Scale$", names(curRow), perl = TRUE)],
poisson = c(),
binomial = inData[grepl("NumTrials$", names(inData), perl = TRUE)][[1]],
negbinomial = curRow[grepl("Scale$", names(curRow), perl = TRUE)])
# Sample from the relevant distribution
simulateFromErrorFamily(meanPredVals, scaleValues, inFamily)
}, covMatrix = as.matrix(as.data.frame(modelNodeDefinitions$inputData[
gsub("Coeff$", "", nonDataNodeNames[grepl("Coeff$", nonDataNodeNames, perl = TRUE) & !grepl("^intercept", nonDataNodeNames, perl = TRUE)], perl = TRUE)
])), inFamily = as.character(modelNodeDefinitions$family), inLink = as.character(modelNodeDefinitions$link), inData = modelNodeDefinitions$inputData, MARGIN = 1)
debug(simulateFromErrorFamily)
simulatedValues <- apply(X = as.matrix(do.call(rbind, mcmcOutput$samples)), FUN = function(curRow, covMatrix, inFamily, inLink, inData) {
# Calculate the mean prediction values
meanPredVals <- applyInverseLink(
as.double(covMatrix %*% curRow[paste(colnames(covMatrix), "Coeff", sep = "")] + curRow[grepl("^intercept.*Coeff$", names(curRow), perl = TRUE)]),
inLink)
# Retrieve the relevant scale parameter for the error distribution
scaleValues <- switch(inFamily,
gaussian = curRow[grepl("Prec$", names(curRow), perl = TRUE)],
gamma = curRow[grepl("SD$", names(curRow), perl = TRUE)],
beta = curRow[grepl("Scale$", names(curRow), perl = TRUE)],
poisson = c(),
binomial = inData[grepl("NumTrials$", names(inData), perl = TRUE)][[1]],
negbinomial = curRow[grepl("Scale$", names(curRow), perl = TRUE)])
# Sample from the relevant distribution
simulateFromErrorFamily(meanPredVals, scaleValues, inFamily)
}, covMatrix = as.matrix(as.data.frame(modelNodeDefinitions$inputData[
gsub("Coeff$", "", nonDataNodeNames[grepl("Coeff$", nonDataNodeNames, perl = TRUE) & !grepl("^intercept", nonDataNodeNames, perl = TRUE)], perl = TRUE)
])), inFamily = as.character(modelNodeDefinitions$family), inLink = as.character(modelNodeDefinitions$link), inData = modelNodeDefinitions$inputData, MARGIN = 1)
meanVals
scaleParams
inScaleParams
rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
table(duplicated(rnorm(length(inMeanVals), inMeanVals, sqrt(1.0 / inScaleParams[1]))))
inScaleParams
sqrt(1.0 / inScaleParams[1])
?rnorm
inErrorFamily
# Regression coefficients to simulate data
trueRegCoeffs <- c(4.0, 1.0, -1.0, 6.0)
precisionVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -5.0, 5.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4]
respValues <- simulateFromErrorFamily(meanValues, precisionVal, "gaussian")
# Add the response variable to the data frame
inputData <- cbind(data.frame(respVar = respValues), regCovariates)
# Create a set of response values
meanValues <- regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset
respValues <- simulateFromErrorFamily(meanValues, precisionVal, "gaussian")
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "mcmcInternals.R", sep = "/"))
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "glmNIMBLE.R", sep = "/"))
respValues <- simulateFromErrorFamily(meanValues, precisionVal, "gaussian")
# Add the response variable to the data frame
inputData <- cbind(data.frame(respVar = respValues), regCovariates)
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, gaussian, "none", "gaussianTest", mcmcControl)
library(nimble)
library(DHARMa)
library(ggplot2)
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, gaussian, "none", "gaussianTest", mcmcControl)
regCoeffNames
modelCode
coeffPlot
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, gaussian, "none", "gaussianTest", mcmcControl)
modelOutput$DHARMaResiduals$fittedPredictedResponse
modelOutput$DHARMaResiduals$simulatedResponse
modelOutput$DHARMaResiduals$refit
modelOutput$DHARMaResiduals$observedResponse
?DHARMa
testResiduals(modelOutput$DHARMaResiduals)
plot(modelOutput$DHARMaResiduals)
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "mcmcInternals.R", sep = "/"))
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "glmNIMBLE.R", sep = "/"))
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, gaussian, "none", "gaussianTest", mcmcControl)
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "mcmcInternals.R", sep = "/"))
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "glmNIMBLE.R", sep = "/"))
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, gaussian, "none", "gaussianTest", mcmcControl)
modelNodeDefinitions$inputData$offsetgaussianTest
modelNodeDefinitions$inputData[[paste("offset", as.character(modelSuffix), sep = "")]]
is.null(modelNodeDefinitions$inputData[[paste("offset", as.character(modelSuffix), sep = "")]])
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "mcmcInternals.R", sep = "/"))
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "glmNIMBLE.R", sep = "/"))
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, gaussian, "none", "gaussianTest", mcmcControl)
plot(modelOutput$DHARMaResiduals)
# Test the residuals of the model
residualTests <- testResiduals(modelOutput$DHARMaResiduals)
library(testthat)
?expect_more_than
expect_more_than(residualTests$uniformity$p.value, 0.05)
expect_gt(residualTests$outliers$p.value, 0.05)
residualTests$outliers$p.value
residualTests$uniformity$p.value
errorFamilies()
# Regression coefficients to simulate data
trueRegCoeffs <- c(-2.0, 3.0, -4.0, 2.0)
scaleVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -5.0, 5.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
debug(simulateFromErrorFamily)
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
inScaleParams
inMeanVals * inMeanVals / (inScaleParams[1] * inScaleParams[1])
inScaleParams[1] * inScaleParams[1] / inMeanVals
errorFamilies()
# Create a set of response values
meanValues <- exp(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset)
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
undebug(simulateFromErrorFamily)
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
respValues
inputData <- cbind(data.frame(respVar = respValues), regCovariates)
inputData <- cbind(data.frame(respVar = respValues), regCovariates)
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, gaussian, "none", "gaussianTest", mcmcControl)
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, list(family = "gamma", link = "log"), "none", "gaussianTest", mcmcControl)
range(respValues)
range(meanValues)
# Regression coefficients to simulate data
trueRegCoeffs <- c(-2.0, 3.0, -4.0, 14.0)
scaleVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -5.0, 5.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- exp(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset)
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
range(respValues)
# Regression coefficients to simulate data
trueRegCoeffs <- c(-2.0, 3.0, -4.0, 6.0)
scaleVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -5.0, 5.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- exp(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset)
range(meanValues)
trueRegCoeffs <- c(-1.0, 3.0, -4.0, 8.0)
scaleVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -5.0, 5.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- exp(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset)
range(meanValues)
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
range(respValues)
# Add the response variable to the data frame
inputData <- cbind(data.frame(respVar = respValues), regCovariates)
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, list(family = "gamma", link = "log"), "none", "gaussianTest", mcmcControl)
residualTests <- testResiduals(modelOutput$DHARMaResiduals)
# Regression coefficients to simulate data
trueRegCoeffs <- c(-1.0, 3.0, -4.0, 8.0)
scaleVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -2.0, 2.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- exp(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset)
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
range(respValues)
# Regression coefficients to simulate data
trueRegCoeffs <- c(-0.5, 1.0, -1.0, 2.0)
scaleVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -2.0, 2.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- exp(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset)
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
range(respValues)
# Regression coefficients to simulate data
trueRegCoeffs <- c(-0.5, 1.0, -1.0, 4.0)
scaleVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -2.0, 2.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- exp(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset)
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
respValues
range(respValues)
range(meanValues)
# Add the response variable to the data frame
inputData <- cbind(data.frame(respVar = respValues), regCovariates)
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, list(family = "gamma", link = "log"), "none", "gaussianTest", mcmcControl)
# Test the residuals of the model
residualTests <- testResiduals(modelOutput$DHARMaResiduals)
range(respValues)
library(nimble)
library(DHARMa)
library(ggplot2)
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "mcmcInternals.R", sep = "/"))
source(paste(Sys.getenv("WORKSPACE_BASELOC"), "Work", "EcosystemResilience", "PaGAn", "R", "glmNIMBLE.R", sep = "/"))
# Regression coefficients to simulate data
trueRegCoeffs <- c(4.0, 1.0, -1.0, 6.0)
precisionVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -5.0, 5.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- applyInverseLink(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset, "identity")
respValues <- simulateFromErrorFamily(meanValues, precisionVal, "gaussian")
# Add the response variable to the data frame
inputData <- cbind(data.frame(respVar = respValues), regCovariates)
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, gaussian, "none", "gaussianTest", mcmcControl)
# Test the residuals of the model
residualTests <- testResiduals(modelOutput$DHARMaResiduals)
modelOutput$parameterSummary
modelOutput$parameterSummary[2, 1]
modelOutput$parameterSummary[2, 1] * (max(regCovariates$A) - min(regCovariates$A))
modelOutput$parameterSummary[2, 1] / (max(regCovariates$A) - min(regCovariates$A))
modelOutput$parameterSummary[2, 1] * sd(regCovariates$A)
modelOutput$parameterSummary[2, 1] / sd(regCovariates$A)
modelOutput$parameterSummary[3, 1] / sd(regCovariates$B)
modelOutput$parameterSummary[4, 1] / sd(regCovariates$C)
# Regression coefficients to simulate data
trueRegCoeffs <- c(-0.5, 1.0, -1.0, 4.0)
scaleVal <- 1.0
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -2.0, 2.0)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- applyInverseLink(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset, "log")
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "gamma")
# Add the response variable to the data frame
inputData <- cbind(data.frame(respVar = respValues), regCovariates)
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset), inputData, list(family = "gamma", link = "log"), "none", "gammaTest", mcmcControl)
# Test the residuals of the model
residualTests <- testResiduals(modelOutput$DHARMaResiduals)
meanValues
respValues
modelOutput$DHARMaResiduals
residualTests
plot(modelOutput$DHARMaResiduals)
# Regression coefficients to simulate data
trueRegCoeffs <- c(1.0, -1.0, -1.5, 0.0)
# Simulate matrix of regression covariates
numDataPoints <- 5000
regCovariates <- data.frame(
A = seq(0.0, 1.0, length.out = numDataPoints),
B = seq(0.0, 1.0, length.out = 20)[(1:numDataPoints - 1) %% 20 + 1],
C = factor(c(rep("levelOne", floor(numDataPoints / 2)), rep("levelTwo", numDataPoints - floor(numDataPoints / 2)))),
testOffset = runif(numDataPoints, -0.5, 0.5)
)
# Set the MCMC control parameters
mcmcControl <- list(
numRuns = 10000,
numChains = 4,
numBurnIn = 5000,
thinDensity = 1,
predictThinDensity = 1
)
# Create a set of response values
meanValues <- applyInverseLink(regCovariates$A * trueRegCoeffs[1] + regCovariates$B * trueRegCoeffs[2] + ifelse(as.integer(regCovariates$C) == 1, 0.0, 1.0) * trueRegCoeffs[3] + trueRegCoeffs[4] + regCovariates$testOffset, "logit")
respValues <- simulateFromErrorFamily(meanValues, scaleVal, "beta")
# Add the response variable to the data frame
inputData <- cbind(data.frame(respVar = respValues), regCovariates)
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset) - 1, inputData, list(family = "beta", link = "logit"), "none", "betaTest", mcmcControl)
respValues
debug(glmNIMBLE)
# Run the regression model
modelOutput <- glmNIMBLE(respVar ~ A + B + C + offset(testOffset) - 1, inputData, list(family = "beta", link = "logit"), "none", "betaTest", mcmcControl)
simulatedValues
simulatedValues <- apply(X = as.matrix(do.call(rbind, mcmcOutput$samples)), FUN = function(curRow, covMatrix, inFamily, inLink, inData, inOffset) {
interceptCoeffVal <- 0.0
if(any(grepl("^intercept.*Coeff$", names(curRow), perl = TRUE))) {
interceptCoeffVal <- curRow[grepl("^intercept.*Coeff$", names(curRow), perl = TRUE)]
}
# Calculate the mean prediction values
meanPredVals <- applyInverseLink(
as.double(covMatrix %*% curRow[paste(colnames(covMatrix), "Coeff", sep = "")] + interceptCoeffVal) + inOffset,
inLink)
# Retrieve the relevant scale parameter for the error distribution
scaleValues <- switch(inFamily,
gaussian = curRow[grepl("Prec$", names(curRow), perl = TRUE)],
gamma = curRow[grepl("SD$", names(curRow), perl = TRUE)],
beta = curRow[grepl("Scale$", names(curRow), perl = TRUE)],
poisson = c(),
binomial = inData[grepl("NumTrials$", names(inData), perl = TRUE)][[1]],
negbinomial = curRow[grepl("Scale$", names(curRow), perl = TRUE)])
# Sample from the relevant distribution
simulateFromErrorFamily(meanPredVals, scaleValues, inFamily)
}, covMatrix = as.matrix(as.data.frame(modelNodeDefinitions$inputData[
gsub("Coeff$", "", nonDataNodeNames[grepl("Coeff$", nonDataNodeNames, perl = TRUE) & !grepl("^intercept", nonDataNodeNames, perl = TRUE)], perl = TRUE)
])), inFamily = as.character(modelNodeDefinitions$family), inLink = as.character(modelNodeDefinitions$link),
inData = modelNodeDefinitions$inputData, inOffset = offsetVals, MARGIN = 1)
simulatedValues
# Test the residuals of the model
residualTests <- testResiduals(modelOutput$DHARMaResiduals)
plot(modelOutput$DHARMaResiduals)
