}, MARGIN = 1)
# Remove those outputs with only one outcome (when p = 1.0)
chiSqP <- chiSqP[chiSqP < 1.0]
chiSqP
sum(chiSqP < 0.05) / length(chiSqP)
?nimStop
?nimbleCode
?buildMCMC
?nimbleObject
?nimbleModel
?buildMCMC
?simulate
?nimbleModel
?getVarNames
?buildMCMC
?runMCMC
?compileNimble
?runMCMC
library(nimble)
?simulate
?nimbleModel
testVal <- setNames(1:3, paste("name", 1:3, sep = ""))
testVal
as.list(testVal)
?getVarNames
nimStop
?nimStop
?nimPrint
?warning
?simulate
?dim
library(testthat)
?use_this
library(usethis)
?use_test
use_test("multinomialEcosystemState")
?use_package
# The number of data points to simulate
numDataPoints <- 500
padZero <- function(inVec, size) {
outVec <- rep(0.0, size)
outVec[1:min(size, length(inVec))] <- inVec[1:min(size, length(inVec))]
outVec
}
# Create a data frame with test data covariates
testFrame <- data.frame(
# Create two scalar covariates
covA = seq(0.0, 1.0, length.out = numDataPoints),
covB = padZero(c(seq(0.0, 1.0, length.out = floor(numDataPoints / 2)), seq(1.0, 0.0, lenght.out = floor(numDataPoints / 2))), numDataPoints),
# Create a factor covariate
covC = as.factor(c(rep("levelA", floor(numDataPoints / 3)), rep("levelB", floor(numDataPoints / 3)), rep("levelC", numDataPoints - 2 * floor(numDataPoints / 3))))
)
# Create a data frame with test data covariates
testFrame <- data.frame(
# Create two scalar covariates
covA = seq(0.0, 1.0, length.out = numDataPoints),
covB = padZero(c(seq(0.0, 1.0, length.out = floor(numDataPoints / 2)), seq(1.0, 0.0, length.out = floor(numDataPoints / 2))), numDataPoints),
# Create a factor covariate
covC = as.factor(c(rep("levelA", floor(numDataPoints / 3)), rep("levelB", floor(numDataPoints / 3)), rep("levelC", numDataPoints - 2 * floor(numDataPoints / 3))))
)
testFrame
# The number of data points to simulate
numDataPoints <- 500
padZero <- function(inVec, size) {
outVec <- rep(0.0, size)
outVec[1:min(size, length(inVec))] <- inVec[1:min(size, length(inVec))]
outVec
}
# Create a data frame with test data covariates
testFrame <- data.frame(
# Create a NULL response variable
respVariable = rep(NA, numDataPoints),
# Create two scalar covariates
covA = seq(0.0, 1.0, length.out = numDataPoints),
covB = padZero(c(seq(0.0, 1.0, length.out = floor(numDataPoints / 2)), seq(1.0, 0.0, length.out = floor(numDataPoints / 2))), numDataPoints),
# Create a factor covariate
covC = as.factor(c(rep("levelA", floor(numDataPoints / 3)), rep("levelB", floor(numDataPoints / 3)), rep("levelC", numDataPoints - 2 * floor(numDataPoints / 3))))
)
# Set formulae controlling the behaviour of the ecosystem multistate model
ecoValFormula <- respVariable ~ covB * covC
ecoPrecFormula <- ~ covC
ecoProbFormula <- ~ covA
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
inLinkFunction
inStateValError
inNumStates
# Ensure that the list is of at least length one
if(length(inModelInput)) {
inModelInput <- lapply(X = inModelInput[((1:numStates - 1) %% length(inModelInput)) + 1], FUN = function(curEntry, allowNull) {
outVal <- NULL
if(is.null(curEntry)) {
if(!allowNull) {
stop("error encountered during the processing of the model specification list: NULL entries encountered")
}
} else {
outVal <- tryCatch(as.formula(curEntry), error = function(err) {
stop("error encountered during the processing of the model specification list: ", err)
})
}
outVal
}, allowNull = allowNull)
} else {
stop("invalid entry for the model specification list: list is empty")
}
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
inStateValModels
inStateProbModels
inStatePrecModels
formulaStrings
respVariables
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
predVariables
fullFormula
modelMatrix
modelMatrix
respValues
model.frame(fullFormula, inoutData)
model.frame(fullFormula, inputData)
inputData
?model.frame
model.frame(fullFormula, inputData, na.action = NULL)
?model.matrix
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
respValues
length(respValues)
nrow(modelMatrix)
modelMatrix
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
modelMatrix
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
modelMatrix
respValues
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
respVariablesBUGS
covariatesBUGS
paste(covariatesBUGS, setBUGSVariableName(as.character(1:length(covaraitesBUGS))), sep = "_")
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
covariatesBUGS
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
covariatesBUGS
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
nn
modelMatrix
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
nn
inLinkFunction
curState
formulaStrings
inputData
linkFunction
covariatesBUGS
stateValError
stateString
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(modelSpecificationMultinomialEcosystemState)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
formulaStrings
formulaStrings[curState, 1]
inputDaat
inputData
covariatesBUGS
curFormula
model.frame(curFormula, inputData, na.action = NULL)
colnames(model.matrix(curFormula, model.frame(curFormula, inputData, na.action = NULL)))
model.matrix(curFormula, model.frame(curFormula, inputData, na.action = NULL))
as.formula(curFormula)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
model.matrix(curFormula, model.frame(curFormula, inputData, na.action = NULL))
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
colnames(
model.matrix(as.formula(curFormula), model.frame(as.formula(curFormula), inputData, na.action = NULL))
)
covariatesBUGS[colnames(
model.matrix(as.formula(curFormula), model.frame(as.formula(curFormula), inputData, na.action = NULL))
)]
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
modelCovars
modelCovars
outNames
stateValCovs
stateValCovs_nonIntercept
stateProbCovs
statePrecCovs
cat(priorStateVal)
cat(priorStateProb)
curState
cat(priorStatePrec)
cat(priorStateProb)
cat(priorStatePrec)
setNames(
c(priorStateVal, priorStateProb, priorStatePrec, likelihoodStateVal, likelihoodStateProb, likelihoodStatePrec),
c("priorValModel", "priorProbModel", "priorPrecModel", "likelihoodValModel", "likelihoodProbModel", "likelihoodPrecModel"))
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
cat(testModelSpec$modelText)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
cat(testModelSpec$modelText)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
cat(testModelSpec$modelText)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
cat(testModelSpec$modelText)
testModelSpec$constants
testModelSpec$data
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
# The number of data points to simulate
numDataPoints <- 500
padZero <- function(inVec, size) {
outVec <- rep(0.0, size)
outVec[1:min(size, length(inVec))] <- inVec[1:min(size, length(inVec))]
outVec
}
# Create a data frame with test data covariates
testFrame <- data.frame(
# Create a NULL response variable
respVariable = rep(NA, numDataPoints),
# Create two scalar covariates
covA = seq(0.0, 1.0, length.out = numDataPoints),
covB = padZero(c(seq(0.0, 1.0, length.out = floor(numDataPoints / 2)), seq(1.0, 0.0, length.out = floor(numDataPoints / 2))), numDataPoints),
# Create a factor covariate
covC = as.factor(c(rep("levelA", floor(numDataPoints / 3)), rep("levelB", floor(numDataPoints / 3)), rep("levelC", numDataPoints - 2 * floor(numDataPoints / 3))))
)
# Set formulae controlling the behaviour of the ecosystem multistate model
ecoValFormula <- respVariable ~ covB
ecoPrecFormula <- ~ covC
ecoProbFormula <- ~ covA
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
cat(testModelSpec)
cat(testModelSpec$modelText)
ecoValFormula <- respVariable ~ covB
ecoPrecFormula <- NULL
ecoProbFormula <- ~ covA
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
cat(testModelSpec$modelText)
# Set formulae controlling the behaviour of the ecosystem multistate model
ecoValFormula <- respVariable ~ covB
ecoPrecFormula <- ~ covC
ecoProbFormula <- ~ covA
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
cat(testModelSpec$modelText)
# Set the coefficient values for the simulation
coefficientValues <- list(
# Set the coefficient values for the ecosystem state value model
"intercept_stateVal" = c(-1.0, 0.5, 0.5),
"covB_stateVal" = c(-0.05, 0.05, 0.1),
# Set the coefficient values for the ecosystem state probability model
"intercept_stateProb" = c(NA, -1.0, 1.0),
"covA_stateProb" = c(NA, 1.0, -1.0),
# Set the coefficient values for the ecosystem state precision model
"intercept_statePrec" = c(0.5, 1.0, 1.5),
"covClevelB_statePrec" = c(0.1, -0.1, 0.5),
"covClevelC_statePrec" = c(0.4, -0.4, 0.5)
)
coefficientValues
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
nimbleModel(modelSpecification$modelCode, constants = modelSpecification$constants, data = modelSpecification$data)
source('~/Work/EcosystemResilience/PaGAn/R/nimbleExtensions.R', echo=TRUE)
source('~/Work/EcosystemResilience/PaGAn/R/nimbleExtensions.R', echo=TRUE)
source('~/Work/EcosystemResilience/PaGAn/R/nimbleExtensions.R', echo=TRUE)
source('~/Work/EcosystemResilience/PaGAn/R/nimbleExtensions.R', echo=TRUE)
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
nimbleModel(modelSpecification$modelCode, constants = modelSpecification$constants, data = modelSpecification$data)
help(modelInitialization)
library(nimble)
help(modelInitialization)
model$initializeInfo()
modelObject$initializeInfo()
modelObject$getVarNames()
modelObject$getNodeNames()
modelObject$plotGraph()
cat(modelSpecification$modelText)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# The number of data points to simulate
numDataPoints <- 500
padZero <- function(inVec, size) {
outVec <- rep(0.0, size)
outVec[1:min(size, length(inVec))] <- inVec[1:min(size, length(inVec))]
outVec
}
# Create a data frame with test data covariates
testFrame <- data.frame(
# Create a NULL response variable
respVariable = rep(NA, numDataPoints),
# Create two scalar covariates
covA = seq(0.0, 1.0, length.out = numDataPoints),
covB = padZero(c(seq(0.0, 1.0, length.out = floor(numDataPoints / 2)), seq(1.0, 0.0, length.out = floor(numDataPoints / 2))), numDataPoints),
# Create a factor covariate
covC = as.factor(c(rep("levelA", floor(numDataPoints / 3)), rep("levelB", floor(numDataPoints / 3)), rep("levelC", numDataPoints - 2 * floor(numDataPoints / 3))))
)
# Set formulae controlling the behaviour of the ecosystem multistate model
ecoValFormula <- respVariable ~ covB
ecoPrecFormula <- ~ covC
ecoProbFormula <- ~ covA
# testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
# Set the coefficient values for the simulation
coefficientValues <- list(
# Set the coefficient values for the ecosystem state value model
"intercept_stateVal" = c(-1.0, 0.5, 0.5),
"covB_stateVal" = c(-0.05, 0.05, 0.1),
# Set the coefficient values for the ecosystem state probability model
"intercept_stateProb" = c(NA, -1.0, 1.0),
"covA_stateProb" = c(NA, 1.0, -1.0),
# Set the coefficient values for the ecosystem state precision model
"intercept_statePrec" = c(0.5, 1.0, 1.5),
"covClevelB_statePrec" = c(0.1, -0.1, 0.5),
"covClevelC_statePrec" = c(0.4, -0.4, 0.5)
)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
modelObject$plotGraph()
rgamma(1, 0.01, 0.01)
rgamma(1, 0.01, 0.01)
rgamma(1, 0.01, 0.01)
rgamma(1, 0.01, 0.01)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
rgamma(1, 0.1, 0.1)
c(setNames(rnorm(2), c("a", "b")), setNames(3, c("c", "d", "e")))
c(setNames(rnorm(2), c("a", "b")), setNames(rnorm(3), c("c", "d", "e")))
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
testModelSpec <- modelSpecificationMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3)
testModelSpec$initialValues
?nimbleModel
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
modelObject$modelInitialization()
modelObject$initializeInfo()
setNames(list(NULL, NULL), c("a", "b"))
?replicate
?grepl
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
vectorNames
setNames(lapply(X = vectorNames, FUN = function(curVecName, initialValues, inNumStates) {
# Initialise an output vector
outVec <- rep(NA, inNumStates)
if(inNumStates > 1) {
# Retrieve the covairates with the current vector
curCovs <- initialValues[grepl(paste("^", curVecName, "\\[\\d+\\]$", sep = ""), names(initialValues), perl = TRUE)]
# Fill in the covariate values in the respective places
outVec[as.integer(gsub("\\]$", "", gsub("^.*\\[", "", names(curCovs), perl = TRUE), perl = TRUE))] <- as.double(curCovs)
} else {
outVec <- initialValues[curVecName]
}
outVec
}, initialValues = initialValues, inNumStates = inNumStates), vectorNames)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
modelObject$initializeInfo()
modelSpecification$initialValues
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
modelObject$initializeInfo()
modelSpecification$data
modelSpecification$modelText
cat(modelSpecification$modelText)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
modelSpecification
modelVariables
inCoefficientValues
?nimbleModel
nimbleModel(modelSpecification$modelCode, constants = modelSpecification$constants, inits = modelSpecification$initialValues)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
modelSpecification
inCoefficientValues
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
modelSpecification$initialValues
setNames(lapply(X = names(modelSpecification$initialValues), FUN = function(curName, curInits, inputInits) {
# Initialise the current output
outValues <- curInits[[curName]]
if(curName %in% names(inputInits) && length(outValues) > 0) {
outValues <- ifelse(is.na(inputInits[[curName]][(1:length(outValues) - 1) %% length(inputInits) + 1]), outValues, inputInits[[curName]][(1:length(outValues) - 1) %% length(inputInits) + 1])
}
outValues
}, curInits = modelSpecification$initialValues, inputInits = inCoefficientValues), names(modelSpecification$initialValues))
inCoefficientValues
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
varsToSimulate
varsToSimulate
modelObject[varsToSimulate]
modelObject[[varsToSimulate[1]]]
?simulate
simulate(modelObject, varsToSimulate)
modelObject$respVariable
modelObject$linStateProb
simulate(modelObject, names(modelSpecification$data))
modelObject$respVariable
?nimbleModel
simulate(modelObject, names(modelSpecification$data), includeData = TRUE)
modelObject$respVariable
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
varsToRetrieve
varsToRetrieve
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
outObject
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
outObject
outObject
?apply
NULL
rep(NULL, 4)
list(NULL)
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
debug(simulateMultinomialEcosystemState)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(1, ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
?replicate
source('~/Work/EcosystemResilience/PaGAn/R/multinomialEcosystemState.R', echo=TRUE)
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(1, ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
setNames(lapply(X = names(modelSpecification$data), FUN = function(curDataName, modelObject, modelSpecification, numSims) {
# Call simulation function for each requested simulation
outVec <- do.call(cbind, replicate(numSims, singleSimulation(curDataName, modelObject, modelSpecification), simplify = FALSE))
# Ensure that the output object has two dimensions
if(is.null(dim(outVec)) || length(dim(outVec)) <= 1) {
dim(outVec) <- c(length(outVec), 1)
}
outVec
}, modelObject = modelObject, modelSpecification = modelSpecification, numSims = inNumSims), names(modelSpecification$data))
outObject
outObject
# Simulate a set of values
simOutput <- simulateMultinomialEcosystemState(5, ecoValFormula, ecoProbFormula, ecoPrecFormula, testFrame, 3, gaussian, coefficientValues)
simOutput$respVariable
?nimbleModel
?glm
